"""D√©corateurs et hooks pour l'application."""

from flask import request, redirect, url_for, current_app
from flask_login import current_user
from werkzeug.security import generate_password_hash

from models import db, User
from config import Config


def check_temporary_password():
    """V√©rifie si l'utilisateur connect√© a un mot de passe temporaire.
    
    Redirige vers la page de changement de mot de passe si n√©cessaire.
    """
    if (current_user.is_authenticated and
        current_user.has_temporary_password and
        request.endpoint not in ['auth.change_password', 'auth.logout', 'static']):
        return redirect(url_for('auth.change_password'))


def ensure_db():
    """Cr√©e les tables de la base de donn√©es et initialise l'admin au premier d√©marrage.
    
    Utilise before_request pour la compatibilit√© Flask>=3 (before_first_request supprim√©).
    """
    if not hasattr(current_app, "_db_initialized"):
        with current_app.app_context():
            db.create_all()
            
            # Ex√©cuter les migrations
            from migrations import run_migrations
            run_migrations(current_app)
            
            # Cr√©er l'utilisateur admin par d√©faut si n√©cessaire
            if not User.query.filter_by(username="admin").first():
                admin_password, is_temporary = Config.get_default_admin_password()
                
                admin = User(
                    username="admin",
                    password=generate_password_hash(admin_password),
                    has_temporary_password=is_temporary
                )
                db.session.add(admin)
                db.session.commit()
                
                # Afficher un message d'information
                if is_temporary:
                    print("\n" + "="*60)
                    print("üîê COMPTE ADMIN CR√â√â AVEC MOT DE PASSE TEMPORAIRE")
                    print("="*60)
                    print("Nom d'utilisateur : admin")
                    print(f"Mot de passe temporaire : {admin_password}")
                    print("\n‚ö†Ô∏è  IMPORTANT : Ce mot de passe doit √™tre chang√© d√®s la premi√®re connexion !")
                    print("="*60 + "\n")
                    
                    current_app.logger.warning("Compte admin cr√©√© avec mot de passe temporaire : %s", admin_password)
                else:
                    print("\nüîê Compte admin cr√©√© avec le mot de passe d√©fini dans DEFAULT_ADMIN_PASSWORD\n")
                    current_app.logger.info("Compte admin cr√©√© avec mot de passe depuis variable d'environnement")
        
        current_app._db_initialized = True